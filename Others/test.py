import random
import numpy as np
import torch.nn as nn
import torch, cv2, torchvision
from torch.autograd import Variable
import torch.nn.functional as F


def testPretrained():
    resnet = torchvision.models.resnet34(pretrained=True)
    print resnet


def testOperator():
    a = [[-random.random() for i in xrange(3)] for j in xrange(3)]
    print a[0]
    print a[1]

    b = torch.FloatTensor(a[0])
    b = Variable(b)
    b = b.view(1, -1)
    print b
    print torch.sum(b)
    print torch.mean(b)
    print torch.max(torch.sum(b), torch.mean(b))


    c = torch.sum(torch.abs(b)).data.numpy()[0]
    print c

    c = torch.mul(b,b)
    print c
    print b, b.volatile
    c = Variable(c)

    print c, c.volatile

    d = torch.cat((b, c), dim=0)
    print d, d.volatile

    e = torch.cat((c, b), dim=0)
    print e, e.volatile

def testHungarian():
    from munkres import Munkres
    hungarian = Munkres()

    ret = []
    ret.append([0.5988732576370239, 0.593967080116272, 0.5874873399734497, 0.590605616569519, 0.5701925158500671, 0.5845481157302856, 0.5860251784324646])
    ret.append([0.5978249907493591, 0.5901663303375244, 0.5871194005012512, 0.5886968374252319, 0.5672130584716797, 0.5825384855270386, 0.5815722346305847])
    ret.append([0.5956549644470215, 0.5894451141357422, 0.5791335701942444, 0.5839282274246216, 0.5632365345954895, 0.577437698841095, 0.5764529705047607])
    ret.append([0.587761402130127, 0.5818054676055908, 0.575451135635376, 0.5763403177261353, 0.5562797784805298, 0.571980357170105, 0.5717030763626099])
    ret.append([0.6023207902908325, 0.5964986085891724, 0.5881332159042358, 0.5919026136398315, 0.5691371560096741, 0.5870761871337891, 0.5855976939201355])
    ret.append([0.5862066745758057, 0.580104410648346, 0.5727660059928894, 0.576642632484436, 0.5530561208724976, 0.5668273568153381, 0.5696781277656555])
    ret.append([0.5930306315422058, 0.5875985026359558, 0.5814967155456543, 0.5818882584571838, 0.5616766214370728, 0.5775641202926636, 0.5739971995353699])
    results = hungarian.compute(ret)
    print results

    ret = []
    ret.append([0.5978249907493591, 0.5901663303375244, 0.5871194005012512, 0.5886968374252319, 0.5672130584716797, 0.5825384855270386, 0.5815722346305847])
    ret.append([0.5988732576370239, 0.593967080116272, 0.5874873399734497, 0.590605616569519, 0.5701925158500671, 0.5845481157302856, 0.5860251784324646])
    ret.append([0.5956549644470215, 0.5894451141357422, 0.5791335701942444, 0.5839282274246216, 0.5632365345954895, 0.577437698841095, 0.5764529705047607])
    ret.append([0.587761402130127, 0.5818054676055908, 0.575451135635376, 0.5763403177261353, 0.5562797784805298, 0.571980357170105, 0.5717030763626099])
    ret.append([0.6023207902908325, 0.5964986085891724, 0.5881332159042358, 0.5919026136398315, 0.5691371560096741, 0.5870761871337891, 0.5855976939201355])
    ret.append([0.5862066745758057, 0.580104410648346, 0.5727660059928894, 0.576642632484436, 0.5530561208724976, 0.5668273568153381, 0.5696781277656555])
    ret.append([0.5930306315422058, 0.5875985026359558, 0.5814967155456543, 0.5818882584571838, 0.5616766214370728, 0.5775641202926636, 0.5739971995353699])
    results = hungarian.compute(ret)
    print results

    ret = []
    ret.append([0.5978249907493591, 0.5901663303375244, 0.5871194005012512, 0.5886968374252319, 0.5672130584716797, 0.5825384855270386, 0.5815722346305847])
    ret.append([0.5956549644470215, 0.5894451141357422, 0.5791335701942444, 0.5839282274246216, 0.5632365345954895, 0.577437698841095, 0.5764529705047607])
    ret.append([0.5988732576370239, 0.593967080116272, 0.5874873399734497, 0.590605616569519, 0.5701925158500671, 0.5845481157302856, 0.5860251784324646])
    ret.append([0.587761402130127, 0.5818054676055908, 0.575451135635376, 0.5763403177261353, 0.5562797784805298, 0.571980357170105, 0.5717030763626099])
    ret.append([0.6023207902908325, 0.5964986085891724, 0.5881332159042358, 0.5919026136398315, 0.5691371560096741, 0.5870761871337891, 0.5855976939201355])
    ret.append([0.5862066745758057, 0.580104410648346, 0.5727660059928894, 0.576642632484436, 0.5530561208724976, 0.5668273568153381, 0.5696781277656555])
    ret.append([0.5930306315422058, 0.5875985026359558, 0.5814967155456543, 0.5818882584571838, 0.5616766214370728, 0.5775641202926636, 0.5739971995353699])
    results = hungarian.compute(ret)
    print results

    ret = []
    ret.append([0.5978249907493591, 0.5901663303375244, 0.5871194005012512, 0.5886968374252319, 0.5672130584716797, 0.5825384855270386, 0.5815722346305847])
    ret.append([0.5956549644470215, 0.5894451141357422, 0.5791335701942444, 0.5839282274246216, 0.5632365345954895, 0.577437698841095, 0.5764529705047607])
    ret.append([0.587761402130127, 0.5818054676055908, 0.575451135635376, 0.5763403177261353, 0.5562797784805298, 0.571980357170105, 0.5717030763626099])
    ret.append([0.5988732576370239, 0.593967080116272, 0.5874873399734497, 0.590605616569519, 0.5701925158500671, 0.5845481157302856, 0.5860251784324646])
    ret.append([0.6023207902908325, 0.5964986085891724, 0.5881332159042358, 0.5919026136398315, 0.5691371560096741, 0.5870761871337891, 0.5855976939201355])
    ret.append([0.5862066745758057, 0.580104410648346, 0.5727660059928894, 0.576642632484436, 0.5530561208724976, 0.5668273568153381, 0.5696781277656555])
    ret.append([0.5930306315422058, 0.5875985026359558, 0.5814967155456543, 0.5818882584571838, 0.5616766214370728, 0.5775641202926636, 0.5739971995353699])
    results = hungarian.compute(ret)
    print results

    ret = []
    ret.append([0.5978249907493591, 0.5901663303375244, 0.5871194005012512, 0.5886968374252319, 0.5672130584716797, 0.5825384855270386, 0.5815722346305847])
    ret.append([0.5956549644470215, 0.5894451141357422, 0.5791335701942444, 0.5839282274246216, 0.5632365345954895, 0.577437698841095, 0.5764529705047607])
    ret.append([0.587761402130127, 0.5818054676055908, 0.575451135635376, 0.5763403177261353, 0.5562797784805298, 0.571980357170105, 0.5717030763626099])
    ret.append([0.6023207902908325, 0.5964986085891724, 0.5881332159042358, 0.5919026136398315, 0.5691371560096741, 0.5870761871337891, 0.5855976939201355])
    ret.append([0.5988732576370239, 0.593967080116272, 0.5874873399734497, 0.590605616569519, 0.5701925158500671, 0.5845481157302856, 0.5860251784324646])
    ret.append([0.5862066745758057, 0.580104410648346, 0.5727660059928894, 0.576642632484436, 0.5530561208724976, 0.5668273568153381, 0.5696781277656555])
    ret.append([0.5930306315422058, 0.5875985026359558, 0.5814967155456543, 0.5818882584571838, 0.5616766214370728, 0.5775641202926636, 0.5739971995353699])
    results = hungarian.compute(ret)
    print results

    ret = []
    ret.append([0.5978249907493591, 0.5901663303375244, 0.5871194005012512, 0.5886968374252319, 0.5672130584716797, 0.5825384855270386, 0.5815722346305847])
    ret.append([0.5956549644470215, 0.5894451141357422, 0.5791335701942444, 0.5839282274246216, 0.5632365345954895, 0.577437698841095, 0.5764529705047607])
    ret.append([0.587761402130127, 0.5818054676055908, 0.575451135635376, 0.5763403177261353, 0.5562797784805298, 0.571980357170105, 0.5717030763626099])
    ret.append([0.6023207902908325, 0.5964986085891724, 0.5881332159042358, 0.5919026136398315, 0.5691371560096741, 0.5870761871337891, 0.5855976939201355])
    ret.append([0.5862066745758057, 0.580104410648346, 0.5727660059928894, 0.576642632484436, 0.5530561208724976, 0.5668273568153381, 0.5696781277656555])
    ret.append([0.5988732576370239, 0.593967080116272, 0.5874873399734497, 0.590605616569519, 0.5701925158500671, 0.5845481157302856, 0.5860251784324646])
    ret.append([0.5930306315422058, 0.5875985026359558, 0.5814967155456543, 0.5818882584571838, 0.5616766214370728, 0.5775641202926636, 0.5739971995353699])
    results = hungarian.compute(ret)
    print results

    ret = []
    ret.append([0.5978249907493591, 0.5901663303375244, 0.5871194005012512, 0.5886968374252319, 0.5672130584716797, 0.5825384855270386, 0.5815722346305847])
    ret.append([0.5956549644470215, 0.5894451141357422, 0.5791335701942444, 0.5839282274246216, 0.5632365345954895, 0.577437698841095, 0.5764529705047607])
    ret.append([0.587761402130127, 0.5818054676055908, 0.575451135635376, 0.5763403177261353, 0.5562797784805298, 0.571980357170105, 0.5717030763626099])
    ret.append([0.6023207902908325, 0.5964986085891724, 0.5881332159042358, 0.5919026136398315, 0.5691371560096741, 0.5870761871337891, 0.5855976939201355])
    ret.append([0.5862066745758057, 0.580104410648346, 0.5727660059928894, 0.576642632484436, 0.5530561208724976, 0.5668273568153381, 0.5696781277656555])
    ret.append([0.5930306315422058, 0.5875985026359558, 0.5814967155456543, 0.5818882584571838, 0.5616766214370728, 0.5775641202926636, 0.5739971995353699])
    ret.append([0.5988732576370239, 0.593967080116272, 0.5874873399734497, 0.590605616569519, 0.5701925158500671, 0.5845481157302856, 0.5860251784324646])
    results = hungarian.compute(ret)
    print results

    ret = []
    ret.append([0.5956549644470215, 0.5894451141357422, 0.5791335701942444, 0.5839282274246216, 0.5632365345954895, 0.577437698841095, 0.5764529705047607])
    ret.append([0.5978249907493591, 0.5901663303375244, 0.5871194005012512, 0.5886968374252319, 0.5672130584716797, 0.5825384855270386, 0.5815722346305847])
    ret.append([0.587761402130127, 0.5818054676055908, 0.575451135635376, 0.5763403177261353, 0.5562797784805298, 0.571980357170105, 0.5717030763626099])
    ret.append([0.6023207902908325, 0.5964986085891724, 0.5881332159042358, 0.5919026136398315, 0.5691371560096741, 0.5870761871337891, 0.5855976939201355])
    ret.append([0.5862066745758057, 0.580104410648346, 0.5727660059928894, 0.576642632484436, 0.5530561208724976, 0.5668273568153381, 0.5696781277656555])
    ret.append([0.5930306315422058, 0.5875985026359558, 0.5814967155456543, 0.5818882584571838, 0.5616766214370728, 0.5775641202926636, 0.5739971995353699])
    ret.append([0.5988732576370239, 0.593967080116272, 0.5874873399734497, 0.590605616569519, 0.5701925158500671, 0.5845481157302856, 0.5860251784324646])
    results = hungarian.compute(ret)
    print results


def showParameters():
    a = nn.Linear(10, 10)
    print a.weight.data
    print a.bias.data


def testRetainGraph():
    x = Variable(torch.randn(5, 5), requires_grad=True)
    y = Variable(torch.randn(5, 5), requires_grad=True)
    z = x*3 - y*4

    def print_grad(g):
        print g

    z.register_hook(print_grad)
    y.register_hook(print_grad)
    x.register_hook(print_grad)
    q = z.sum()*2
    q.backward()


def testRandomShuffle():
    a = [[i+j for i in xrange(3)] for j in xrange(3)]
    print a
    random.shuffle(a)
    print a


def swapNum(a, b):
    print a, b
    a = a^b # each bit indicate the same or not same
    b = a^b # get the a from the TAG
    a = a^b # get the b form the TAG
    print a, b

from dataset import DatasetFromFolder

t = DatasetFromFolder('MOT16/train/MOT16-05', show=1)
t.loadNext()